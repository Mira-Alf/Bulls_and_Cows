type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/GameController.java
  visible: true
  text: |
    package bullscows;

    import java.util.*;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    public class GameController {

        private final int numDigits;
        private final int secretCode;
        private final Random random = new Random();
        private boolean gameWon = false;
        private final List<GameTurn> turns = new ArrayList<>();

        public GameController(int numDigits) {
            if(numDigits > 10) {
                System.out.println("Error: can't generate a secret number with a length of 11 because there aren't enough unique digits.");
                this.numDigits = 0;
                this.secretCode = 0;
            }
            else {
                this.numDigits = numDigits;
                this.secretCode = getNumberWithDistinctDigits();
            }
        }

        private void buildNumber(int randomNumber, List<Integer> list, StringBuilder builder) {
            Integer value = list.get(randomNumber);
            builder.append(value);
            list.remove(value);
        }

        private int getNumberWithDistinctDigits() {
            final List<Integer> list = IntStream.rangeClosed(0, 9)
                        .mapToObj(num->num)
                        .collect(Collectors.toList());
            StringBuilder builder = new StringBuilder();
            int randomNumber = random.nextInt(list.size()-1)+1;
            buildNumber(randomNumber, list, builder);
            IntStream.rangeClosed(1, numDigits-1)
                    .forEach(num-> {
                        int listNumber = random.nextInt(list.size());
                        buildNumber(listNumber, list, builder);
                    });
            return Integer.valueOf(builder.toString());
        }

        private void displayIntroduction() {
            System.out.printf("The secret code is prepared: ");
            IntStream.rangeClosed(0, numDigits-1).forEach(n-> System.out.print("*"));
            System.out.println(".\n");
        }

        public void startPredefinedGame() {
            List<Integer> guesses = new ArrayList<>();
            int randomValue = random.nextInt(9)+1;
            while(randomValue > 0) {
                int guess = getNumberWithDistinctDigits();
                if (guess != secretCode) {
                    guesses.add(guess);
                    randomValue--;
                }
            }
            guesses.add(secretCode);
            int numTurns = 0, index = 0;
            displayIntroduction();
            while(numTurns < guesses.size()) {
                GameTurn turn = new GameTurn(++index, guesses.get(numTurns));
                turn.playTurn();
                evaluateTurn(turn);
                turn.displayGrade();
                numTurns++;
            }
            if(gameWon)
                System.out.printf("Congrats! The secret code is %d.%n",secretCode);

        }

        public void gradeOneRound() {
            Scanner scanner = new Scanner(System.in);
            GameTurn turn = new GameTurn(0, scanner);
            turn.playTurn();
            if(verifyTurn(turn)) {
                evaluateTurn(turn);
                System.out.print("Grade: ");
                turn.displayGrade();

                System.out.printf("%s The secret code is %d.", turn.getGradeString(), secretCode);
            }
        }

        public void startGame() {
            displayIntroduction();
            Scanner scanner = new Scanner(System.in);
            int index = 0;
            while(gameWon == false) {
                GameTurn turn = new GameTurn(++index, scanner);
                turns.add(turn);
                turn.playTurn();
                if(verifyTurn(turn)) {
                    evaluateTurn(turn);
                    turn.displayGrade();
                }
            }
            if(gameWon)
                System.out.printf("Congrats! The secret code is %d.%n",secretCode);
        }

        private boolean verifyTurn(GameTurn turn) {
            int guess = turn.getGuessValue();
            if(String.valueOf(guess).length() != numDigits) {
                System.out.printf("The guess should be %d digits long%n", numDigits);
                return false;
            }
            if(String.valueOf(guess).chars().mapToObj(o->o).collect(Collectors.toSet()).size() != numDigits) {
                System.out.printf("The guess should have %d distinct digits. No repetitions in the secret code.%n", numDigits);
                return false;
            }
            return true;
        }

        private void evaluateTurn(GameTurn turn) {
            setBulls(turn);
            setCows(turn);
            updateGameStatus(turn);
        }

        private void setBulls(GameTurn turn) {
            final String actual = String.valueOf(secretCode);
            final String guess = String.valueOf(turn.getGuessValue());

            turn.setBulls((int)IntStream.rangeClosed(0, actual.length()-1)
                    .filter(n->actual.charAt(n) == guess.charAt(n)).count());
        }

        private void setCows(GameTurn turn) {
            final String actual = String.valueOf(secretCode);
            final String guess = String.valueOf(turn.getGuessValue());

            int cows = (int)guess.chars()
                    .filter(num->actual.contains((CharSequence)String.valueOf((char)num)))
                    .count();
            turn.setCows(cows-turn.getBulls());
        }

        private void updateGameStatus(GameTurn turn) {
            if(turn.getBulls() == numDigits) {
                gameWon = true;
            }
        }


        public int getSecretCode() {
            return secretCode;
        }
    }
  learner_created: true
- name: src/bullscows/GameTurn.java
  visible: true
  text: |
    package bullscows;

    import java.util.Scanner;

    public class GameTurn {

        private int index;
        private Scanner scanner;
        private int guessValue;
        private int bulls;
        private int cows;
        private String gradeString;



        public GameTurn(int index, Scanner scanner) {
            this.index = index;
            this.scanner = scanner;
        }

        public GameTurn(int index, int guessValue) {
            this.index = index;
            this.guessValue = guessValue;
        }



        public void playTurn() {
            if(index != 0)
                System.out.printf("Turn %d. Answer:%n", index);
            if(this.guessValue == 0)
                this.guessValue = scanner.nextInt();
            else
                System.out.println(guessValue);
        }


        public int getGuessValue() {
            return this.guessValue;
        }

        public void displayGrade() {
            if(bulls == 0 && cows == 0)
                gradeString = "None.";
            else if(bulls > 0 && cows == 0){
                gradeString = getGradeString(bulls, "bull")+".";
            } else if(cows > 0 && bulls == 0) {
                gradeString = getGradeString(cows, "cow")+".";
            } else {
                gradeString =
                        getGradeString(bulls, "bull")
                                + " and " +
                    getGradeString(cows, "cow") + ".";
            }
            if(index != 0)
                System.out.println(gradeString);

        }

        private String getGradeString(int value, String type) {
            if(value == 1)
                return "1 "+type+"(s)";
            else
                return value + " " + type + "(s)";

        }



        public void setBulls(int bulls) {
            this.bulls = bulls;
        }

        public void setCows(int cows) {
            this.cows = cows;
        }

        public int getBulls() {
            return bulls;
        }

        public int getCows() {
            return cows;
        }

        public String getGradeString() {
            return gradeString;
        }
    }
  learner_created: true
- name: src/bullscows/SecretCodeGenerator.java
  visible: true
  learner_created: true
- name: src/bullscows/PseudoRandomSecretCodeGenerator.java
  visible: true
  learner_created: true
- name: src/bullscows/BullsAndCowsException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/289/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/53/stages/289/implement">JetBrains
    Academy</a>
  time: Sat, 10 Oct 2020 17:38:29 UTC
record: 3
