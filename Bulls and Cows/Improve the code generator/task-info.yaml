type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();

            String output;
            int gotAnswer = 0;
            output = main.execute("1");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check of results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one. ");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("4");

            Integer[] usedNums = getUsedNumbers(main, 4);
            boolean check = getPermutations(main, 4, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("6");

            Integer[] usedNums = getUsedNumbers(main, 6);
            boolean check = getPermutations(main, 6, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // length limit check
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("11");

            if (output.toLowerCase().contains("error")) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("An error message expected with input \"11\"");
            }
        }

        Integer[] getUsedNumbers(TestedProgram main, int length) {
            Integer[] nums = new Integer[length];
            int[] result;

            int index = 0;
            String output;
            String input;

            for (int i = 0; i < 10; i++) {
                input = new String(new char[length]).replace("\0", Integer.toString(i));
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    nums[index++] = i;
                }
                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                        "Output should contain " + length + " bulls " +
                        "summarized as every option was tried. Found: " + index
                );
            }

            return nums;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Integer[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        private static void swap(Integer[] input, int a, int b) {
            int tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }


        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                        "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }
    }
  learner_created: false
- name: src/bullscows/PseudoRandomSecretCodeGenerator.java
  visible: true
  text: |-
    package bullscows;

    import java.security.cert.CollectionCertStoreParameters;
    import java.util.List;
    import java.util.Random;
    import java.util.Scanner;
    import java.util.Set;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    public class PseudoRandomSecretCodeGenerator implements SecretCodeGenerator {
        private int numDigits;
        private long pseudoRandomNumber = System.nanoTime();
        private String secretCode;
        private final Scanner scanner = new Scanner(System.in);
        private final Random random = new Random();

        public PseudoRandomSecretCodeGenerator() throws BullsAndCowsException {
            this.numDigits = scanner.nextInt();
            if(numDigits > 10)
                throw new BullsAndCowsException(String.format("Error: can't generate a secret number with a length of %d because there aren't enough unique digits.", numDigits));
            generateSecretCode();
        }

        public PseudoRandomSecretCodeGenerator(int numDigits) throws BullsAndCowsException {
            this.numDigits = numDigits;
            generateSecretCode();
        }

        private void generateSecretCode() {
            boolean proceed = true;
            StringBuilder builder = new StringBuilder();

            while(proceed == true) {
                List<Character> charSet = String.valueOf(pseudoRandomNumber).chars()
                        .mapToObj(num -> (char)num).distinct().collect(Collectors.toList());
                if(charSet.size() >= numDigits) {
                    proceed = false;
                    int count = 0;
                    while(count < numDigits) {
                        int randomNumber = random.nextInt(charSet.size()-1);
                        char value = charSet.get(randomNumber);
                        if(count == 0 && value == '0')
                            continue;
                        charSet.remove((Character) value);
                        builder.append(value);
                        count++;
                    }
                }
                pseudoRandomNumber = System.nanoTime();
            }
            this.secretCode = builder.toString();
        }

        @Override
        public String getSecretCode() {
            return secretCode;
        }

        @Override
        public int getNumberOfDigits() {
            return numDigits;
        }
    }
  learner_created: true
- name: src/bullscows/GameController.java
  visible: true
  text: |-
    package bullscows;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;
    import java.util.stream.IntStream;

    public class GameController {

        private int numDigits;
        private String secretCode;
        private boolean gameWon = false;
        private List<GameTurn> turns = new ArrayList<>();
        private final Scanner scanner = new Scanner(System.in);

        public GameController(int numDigits, String secretCode) {
            this.numDigits = numDigits;
            this.secretCode = secretCode;
        }
        public GameController(int numDigits, SecretCodeGenerator generator) {
            this.numDigits = numDigits;
            this.secretCode = generator.getSecretCode();
            System.out.println(secretCode);
        }

        public void addTurn(GameTurn... rounds) {
            Arrays.stream(rounds).forEach(t->turns.add(t));
        }

        public List<GameTurn> getTurns() {
            return turns;
        }

        public String getSecretCode() {
            return secretCode;
        }

        public void evaluateTurn(GameTurn turn) {
                updateBullsAndCows(turn);
        }

        private void updateBullsAndCows(GameTurn turn) {
            final String guess = turn.getGuess();
            int bulls = (int)IntStream.rangeClosed(0, secretCode.length()-1)
                    .filter(n->secretCode.charAt(n) == guess.charAt(n)).count();
            int cows = (int)guess.chars()
                    .filter(num->secretCode.contains((CharSequence)String.valueOf((char)num)))
                    .count();
            cows = bulls > 0 ? cows-bulls : cows;
            turn.setBullsAndCows(bulls, cows);
            if(turn.getBulls() == numDigits)
                gameWon = true;
        }

        public boolean getGameStatus() {
            return gameWon;
        }
    }
  learner_created: true
- name: src/bullscows/SecretCodeGenerator.java
  visible: true
  text: |-
    package bullscows;

    public interface SecretCodeGenerator {
        public String getSecretCode();

        public int getNumberOfDigits();
    }
  learner_created: true
- name: src/bullscows/BullsAndCowsException.java
  visible: true
  text: |-
    package bullscows;

    public class BullsAndCowsException extends Exception{
        private String msg;
        public BullsAndCowsException(String msg) {
            this.msg = msg;
        }

        @Override
        public String getMessage() {
            return msg;
        }
    }
  learner_created: true
- name: src/bullscows/GameTurn.java
  visible: true
  text: |-
    package bullscows;

    import java.util.Scanner;

    public class GameTurn {

        private int index;
        private String guess;
        private String gradeString;
        private final Scanner scanner = new Scanner(System.in);
        private int bulls;
        private int cows;

        public GameTurn(int index, String guess, String gradeString) {
            this.index = index;
            this.guess = guess;
            this.gradeString = gradeString;
        }

        public GameTurn(int index) {
            this.index = index;
            this.guess = scanner.next();
        }

        public String getGuess() {
            return guess;
        }

        public String getGradeString() {
            return gradeString;
        }

        public void setGradeString(String gradeString) {
            this.gradeString = gradeString;
        }

        public int getIndex() {
            return index;
        }

        public void setBullsAndCows(int bulls, int cows) {
            this.bulls = bulls;
            this.cows = cows;
        }

        public int getBulls() {
            return bulls;
        }

        public int getCows() {
            return cows;
        }
    }
  learner_created: true
- name: src/bullscows/RandomSecretCodeGenerator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/291/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/53/stages/291/implement">JetBrains
    Academy</a>
  time: Sun, 11 Oct 2020 01:52:26 UTC
record: 5
